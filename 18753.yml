name: WD-201 | L1 Milestone

on:
  push:
    branches: ["submission-*"]

jobs:
  repo_check:
    runs-on: ubuntu-latest
    outputs:
      outcome: ${{steps.get-submission-url.outcome}}
      submissionUrl: ${{steps.get-submission-url.outputs.result}}
    steps:
      - name: Check out the parent repository with student submission data
        uses: actions/checkout@v2
      - name: Extract the student submission repo from URL
        uses: actions/github-script@v5
        id: get-submission-url
        continue-on-error: true
        with:
          script: |
            const submission = require('./submission.json')
            const gitURL =  submission.checklist[1].result
            if (gitURL.split("/").length >= 2) {
              return gitURL
            } else {
              throw "The submitted URL seems to be invalid"
            }
          result-encoding: string
      - name: Report invalid repository URL in submission
        if: steps.get-submission-url.outcome != 'success'
        uses: pupilfirst/actions/grading@v1
        with:
          fail_submission: true
          feedback: The submitted URL is either invalid or private. Please make sure that you submit a valid public URL.
        env:
          REVIEW_END_POINT: ${{ secrets.REVIEW_END_POINT }}
          REVIEW_BOT_USER_TOKEN: ${{ secrets.REVIEW_BOT_USER_TOKEN }}
  tests:
    needs: repo_check
    if: needs.repo_check.outputs.outcome == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Check out the parent repository with student submission data
        uses: actions/checkout@v2
      - name: Check submission output using Node
        id: check-function-output
        run: |
          node index.js > output.txt
        continue-on-error: true
      - name: Run a script to generate feedback report
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require("fs");

            function checkValidString(input) {
              return input.toLowerCase().indexOf("hello") > -1;
            }

            fs.readFile("output.txt", "utf8", (err, data) => {
              if (err) {
                throw err;
              } else {
                let passed = checkValidString(data);
                let reportFile = "./report.json";
                let feedback = passed
                  ? "Good work! It looks like your code prints the output according to the specification"
                  : "Uh oh! It looks like you've missed some parts of the assignment! Please ensure that the program outputs the expected message in the lesson and try again.";
                let report = {
                  version: 0,
                  grade: passed ? "accept" : "reject",
                  feedback: feedback,
                };
                fs.writeFileSync(reportFile, JSON.stringify(report));
              }
            })
      - name: Test output
        run: |
          cat report.json
